
/*function for converting pixels to em. It has 2 parameters: value and base */

@function pxToEm($value, $base) {
    @return ($value / $base) + em; 
    
}

/*now that the rule is created, we can call on it when we need it, like <h1> below!!! */

$white: #ffffff;

h1 {
    font-size: pxToEm(32,16);
    color: $white;
}

/*Here we are setting variables for colours*/

$yellow: #09973d;
$pink: #e84610;
$purple: #bada55;
$brown: #000000;



/*We are using the variable here - this saves use retyping the Hex code all the time!*/

body {
    background-color: $yellow;
}

/*Here we set variables for width and height. Each time we call on there, we will get the same width */
/* and height as we have set here...*/

$width: 300px;
$height: 500px;

div {
    width: $width;
    height: $height;
    border: 1px solid $white;
}

/*We can also make MAPS is SASS, where we set up KEY / VALUE pairs, as below...*/

/*here we set up the color keys (name) with their values (the hex code)*/

$colors: ( 
    black: #000000,  /*note: the commas here, NOT semi-colons */
    white: #ffffff,
    red: #e84610,
    green: #bada55,
    blue: #09973d,
);

/*...then here is set the shorthand rule to tansalte them to CSS... */
/*  .. for EACH key item in the $colors list above, we get a CSS code line with the color, */
/* and it's Hex code applied to the background colour */

@each $key, $value in $colors {
    .item-#{$key} {
        background-color:$value;
    }
}

/* THEN is we set a class in HTML (eg: div class="item-green", the color will be pulled from */
/* this color code list, and long as the class is named 'item-($key), where $key is the color*/


/* how to pass a variable to a CSS class*/

$class: container;  /*create a variable called class, with its value as container: ;*/

div.#{$class} {  /*in CSS this will create a div.container class, with an orange background*/
    background-color: orange;
}